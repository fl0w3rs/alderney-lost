let mix = require('laravel-mix');
let fs = require('fs')

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

const { exec } = require('child_process');
 
exec('rm -rf public/dist/*', (err, stdout, stderr) => {});

mix.sass('assets/css/bundle.scss', 'public/dist/css/bundle.css')
    .sass('assets/css/toggles.scss', 'public/dist/css/toggles.css')
    .js('assets/js/main.js', 'public/dist/js/bundle.js')
    .js('assets/js/authentication.js', 'public/dist/js/ath.js')
    .js('assets/js/home.js', 'public/dist/js/hm.js')
    .js('assets/js/test.js', 'public/dist/js/test.js')
    .js('assets/js/admin/test_edit.js', 'public/dist/js/adm/testedt.js')
    .js('assets/js/admin/test_create.js', 'public/dist/js/adm/testcrt.js')
    .js('assets/js/admin/question_edit.js', 'public/dist/js/adm/qstnedt.js')
    .js('assets/js/admin/question_create.js', 'public/dist/js/adm/qstncrt.js')
    .copy('assets/mdb/compiled.css', 'public/dist/css/mdb.css')
    .copy('assets/mdb/compiled.js', 'public/dist/js/mdb.js')
    .copyDirectory('assets/images', 'public/dist/img');
    
fs.readFile('core/config.php', 'utf8', function (err, data) {
    if (err) {
        return console.log(err);
    }
    let rand_hash =  Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    let result = data.replace(/'asset_version' => '.*',/g, `'asset_version' => '${rand_hash}',`);
    
    fs.writeFile('core/config.php', result, 'utf8', function (err) {
        if (err) return console.log(err);
    });
});

exec('rm -rf cache/*', (err, stdout, stderr) => {});


// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.when(condition, function (mix) {}) <-- Call function if condition is true.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
